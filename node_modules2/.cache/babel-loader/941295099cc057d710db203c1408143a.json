{"ast":null,"code":"/*\n * Copyright (c) 2015, Yahoo Inc. All rights reserved.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nconst util = require(\"util\");\n\nconst glob = util.promisify(require(\"glob\"));\n\nconst Handlebars = require(\"handlebars\");\n\nconst fs = require(\"graceful-fs\");\n\nconst readFile = util.promisify(fs.readFile);\n\nconst path = require(\"path\"); // -----------------------------------------------------------------------------\n\n\nconst defaultConfig = {\n  handlebars: Handlebars,\n  extname: \".handlebars\",\n  encoding: \"utf8\",\n  layoutsDir: undefined,\n  // Default layouts directory is relative to `express settings.view` + `layouts/`\n  partialsDir: undefined,\n  // Default partials directory is relative to `express settings.view` + `partials/`\n  defaultLayout: \"main\",\n  helpers: undefined,\n  compilerOptions: undefined,\n  runtimeOptions: undefined\n};\n\nclass ExpressHandlebars {\n  constructor(config = {}) {\n    // Config properties with defaults.\n    Object.assign(this, defaultConfig, config); // save given config to override other settings.\n\n    this.config = config; // Express view engine integration point.\n\n    this.engine = this.renderView.bind(this); // Normalize `extname`.\n\n    if (this.extname.charAt(0) !== \".\") {\n      this.extname = \".\" + this.extname;\n    } // Internal caches of compiled and precompiled templates.\n\n\n    this.compiled = {};\n    this.precompiled = {}; // Private internal file system cache.\n\n    this._fsCache = {};\n  }\n\n  async getPartials(options) {\n    if (typeof this.partialsDir === \"undefined\") {\n      return {};\n    }\n\n    const partialsDirs = Array.isArray(this.partialsDir) ? this.partialsDir : [this.partialsDir];\n    const dirs = await Promise.all(partialsDirs.map(async dir => {\n      let dirPath;\n      let dirTemplates;\n      let dirNamespace;\n      let dirRename; // Support `partialsDir` collection with object entries that contain a\n      // templates promise and a namespace.\n\n      if (typeof dir === \"string\") {\n        dirPath = dir;\n      } else if (typeof dir === \"object\") {\n        dirTemplates = dir.templates;\n        dirNamespace = dir.namespace;\n        dirRename = dir.rename;\n        dirPath = dir.dir;\n      } // We must have some path to templates, or templates themselves.\n\n\n      if (!dirPath && !dirTemplates) {\n        throw new Error(\"A partials dir must be a string or config object\");\n      }\n\n      const templates = dirTemplates || (await this.getTemplates(dirPath, options));\n      return {\n        templates,\n        namespace: dirNamespace,\n        rename: dirRename\n      };\n    }));\n    const partials = {};\n\n    for (const dir of dirs) {\n      const {\n        templates,\n        namespace,\n        rename\n      } = dir;\n      const filePaths = Object.keys(templates);\n      const getTemplateNameFn = typeof rename === \"function\" ? rename : this._getTemplateName.bind(this);\n\n      for (const filePath of filePaths) {\n        const partialName = getTemplateNameFn(filePath, namespace);\n        partials[partialName] = templates[filePath];\n      }\n    }\n\n    return partials;\n  }\n\n  async getTemplate(filePath, options = {}) {\n    filePath = path.resolve(filePath);\n    const encoding = options.encoding || this.encoding;\n    const cache = options.precompiled ? this.precompiled : this.compiled;\n    let template = options.cache && cache[filePath];\n\n    if (template) {\n      return template;\n    } // Optimistically cache template promise to reduce file system I/O, but\n    // remove from cache if there was a problem.\n\n\n    try {\n      cache[filePath] = this._getFile(filePath, {\n        cache: options.cache,\n        encoding\n      }).then(file => {\n        const compileTemplate = (options.precompiled ? this._precompileTemplate : this._compileTemplate).bind(this);\n        return compileTemplate(file, this.compilerOptions);\n      });\n      template = await cache[filePath];\n      return template;\n    } catch (err) {\n      delete cache[filePath];\n      throw err;\n    }\n  }\n\n  async getTemplates(dirPath, options = {}) {\n    const cache = options.cache;\n    const filePaths = await this._getDir(dirPath, {\n      cache\n    });\n    const templates = await Promise.all(filePaths.map(filePath => {\n      return this.getTemplate(path.join(dirPath, filePath), options);\n    }));\n    const hash = {};\n\n    for (let i = 0; i < filePaths.length; i++) {\n      hash[filePaths[i]] = templates[i];\n    }\n\n    return hash;\n  }\n\n  async render(filePath, context, options = {}) {\n    const encoding = options.encoding || this.encoding;\n    const [template, partials] = await Promise.all([this.getTemplate(filePath, {\n      cache: options.cache,\n      encoding\n    }), options.partials || this.getPartials({\n      cache: options.cache,\n      encoding\n    })]);\n    const helpers = { ...this.helpers,\n      ...options.helpers\n    };\n    const runtimeOptions = { ...this.runtimeOptions,\n      ...options.runtimeOptions\n    }; // Add ExpressHandlebars metadata to the data channel so that it's\n    // accessible within the templates and helpers, namespaced under:\n    // `@exphbs.*`\n\n    const data = { ...options.data,\n      exphbs: { ...options,\n        filePath,\n        helpers,\n        partials,\n        runtimeOptions\n      }\n    };\n\n    const html = this._renderTemplate(template, context, { ...runtimeOptions,\n      data,\n      helpers,\n      partials\n    });\n\n    return html;\n  }\n\n  async renderView(viewPath, options = {}, callback = null) {\n    const context = options;\n    let promise;\n\n    if (!callback) {\n      promise = new Promise((resolve, reject) => {\n        callback = (err, value) => {\n          err !== null ? reject(err) : resolve(value);\n        };\n      });\n    } // Express provides `settings.views` which is the path to the views dir that\n    // the developer set on the Express app. When this value exists, it's used\n    // to compute the view's name. Layouts and Partials directories are relative\n    // to `settings.view` path\n\n\n    let view;\n    const views = options.settings && options.settings.views;\n\n    const viewsPath = this._resolveViewsPath(views, viewPath);\n\n    if (viewsPath) {\n      view = this._getTemplateName(path.relative(viewsPath, viewPath));\n      this.partialsDir = this.config.partialsDir || path.join(viewsPath, \"partials/\");\n      this.layoutsDir = this.config.layoutsDir || path.join(viewsPath, \"layouts/\");\n    }\n\n    const encoding = options.encoding || this.encoding; // Merge render-level and instance-level helpers together.\n\n    const helpers = { ...this.helpers,\n      ...options.helpers\n    }; // Merge render-level and instance-level partials together.\n\n    const partials = { ...(await this.getPartials({\n        cache: options.cache,\n        encoding\n      })),\n      ...(await (options.partials || {}))\n    }; // Pluck-out ExpressHandlebars-specific options and Handlebars-specific\n    // rendering options.\n\n    const renderOptions = {\n      cache: options.cache,\n      encoding,\n      view,\n      layout: \"layout\" in options ? options.layout : this.defaultLayout,\n      data: options.data,\n      helpers,\n      partials,\n      runtimeOptions: options.runtimeOptions\n    };\n\n    try {\n      let html = await this.render(viewPath, context, renderOptions);\n\n      const layoutPath = this._resolveLayoutPath(renderOptions.layout);\n\n      if (layoutPath) {\n        html = await this.render(layoutPath, { ...context,\n          body: html\n        }, { ...renderOptions,\n          layout: undefined\n        });\n      }\n\n      callback(null, html);\n    } catch (err) {\n      callback(err);\n    }\n\n    return promise;\n  } // -- Protected Hooks ----------------------------------------------------------\n\n\n  _compileTemplate(template, options) {\n    return this.handlebars.compile(template.trim(), options);\n  }\n\n  _precompileTemplate(template, options) {\n    return this.handlebars.precompile(template.trim(), options);\n  }\n\n  _renderTemplate(template, context, options) {\n    return template(context, options).trim();\n  } // -- Private ------------------------------------------------------------------\n\n\n  async _getDir(dirPath, options = {}) {\n    dirPath = path.resolve(dirPath);\n    const cache = this._fsCache;\n    let dir = options.cache && cache[dirPath];\n\n    if (dir) {\n      dir = await dir;\n      return dir.concat();\n    }\n\n    const pattern = \"**/*\" + this.extname; // Optimistically cache dir promise to reduce file system I/O, but remove\n    // from cache if there was a problem.\n\n    try {\n      dir = cache[dirPath] = glob(pattern, {\n        cwd: dirPath,\n        follow: true\n      });\n\n      if (options._throwTestError) {\n        // FIXME: not sure how to throw error in glob for test coverage\n        throw new Error(\"test\");\n      }\n\n      dir = await dir;\n      return dir.concat();\n    } catch (err) {\n      delete cache[dirPath];\n      throw err;\n    }\n\n    ;\n  }\n\n  async _getFile(filePath, options = {}) {\n    filePath = path.resolve(filePath);\n    const cache = this._fsCache;\n    const encoding = options.encoding || this.encoding;\n    let file = options.cache && cache[filePath];\n\n    if (file) {\n      return file;\n    } // Optimistically cache file promise to reduce file system I/O, but remove\n    // from cache if there was a problem.\n\n\n    try {\n      cache[filePath] = readFile(filePath, encoding || \"utf8\");\n      file = await cache[filePath];\n      return file;\n    } catch (err) {\n      delete cache[filePath];\n      throw err;\n    }\n\n    ;\n  }\n\n  _getTemplateName(filePath, namespace) {\n    let name = filePath;\n\n    if (name.endsWith(this.extname)) {\n      name = name.substring(0, name.length - this.extname.length);\n    }\n\n    if (namespace) {\n      name = namespace + \"/\" + name;\n    }\n\n    return name;\n  }\n\n  _resolveViewsPath(views, file) {\n    if (!Array.isArray(views)) {\n      return views;\n    }\n\n    let lastDir = path.resolve(file);\n    let dir = path.dirname(lastDir);\n    const absoluteViews = views.map(v => path.resolve(v)); // find the closest parent\n\n    while (dir !== lastDir) {\n      const index = absoluteViews.indexOf(dir);\n\n      if (index >= 0) {\n        return views[index];\n      }\n\n      lastDir = dir;\n      dir = path.dirname(lastDir);\n    } // cannot resolve view\n\n\n    return null;\n  }\n\n  _resolveLayoutPath(layoutPath) {\n    if (!layoutPath) {\n      return null;\n    }\n\n    if (!path.extname(layoutPath)) {\n      layoutPath += this.extname;\n    }\n\n    return path.resolve(this.layoutsDir || \"\", layoutPath);\n  }\n\n}\n\nmodule.exports = ExpressHandlebars;","map":{"version":3,"sources":["/home/gbowne1/react_test/node_modules/express-handlebars/lib/express-handlebars.js"],"names":["util","require","glob","promisify","Handlebars","fs","readFile","path","defaultConfig","handlebars","extname","encoding","layoutsDir","undefined","partialsDir","defaultLayout","helpers","compilerOptions","runtimeOptions","ExpressHandlebars","constructor","config","Object","assign","engine","renderView","bind","charAt","compiled","precompiled","_fsCache","getPartials","options","partialsDirs","Array","isArray","dirs","Promise","all","map","dir","dirPath","dirTemplates","dirNamespace","dirRename","templates","namespace","rename","Error","getTemplates","partials","filePaths","keys","getTemplateNameFn","_getTemplateName","filePath","partialName","getTemplate","resolve","cache","template","_getFile","then","file","compileTemplate","_precompileTemplate","_compileTemplate","err","_getDir","join","hash","i","length","render","context","data","exphbs","html","_renderTemplate","viewPath","callback","promise","reject","value","view","views","settings","viewsPath","_resolveViewsPath","relative","renderOptions","layout","layoutPath","_resolveLayoutPath","body","compile","trim","precompile","concat","pattern","cwd","follow","_throwTestError","name","endsWith","substring","lastDir","dirname","absoluteViews","v","index","indexOf","module","exports"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2015, Yahoo Inc. All rights reserved.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\n\nconst util = require(\"util\");\nconst glob = util.promisify(require(\"glob\"));\nconst Handlebars = require(\"handlebars\");\nconst fs = require(\"graceful-fs\");\nconst readFile = util.promisify(fs.readFile);\nconst path = require(\"path\");\n\n// -----------------------------------------------------------------------------\n\nconst defaultConfig = {\n\thandlebars: Handlebars,\n\textname: \".handlebars\",\n\tencoding: \"utf8\",\n\tlayoutsDir: undefined, // Default layouts directory is relative to `express settings.view` + `layouts/`\n\tpartialsDir: undefined, // Default partials directory is relative to `express settings.view` + `partials/`\n\tdefaultLayout: \"main\",\n\thelpers: undefined,\n\tcompilerOptions: undefined,\n\truntimeOptions: undefined,\n};\n\nclass ExpressHandlebars {\n\tconstructor (config = {}) {\n\t\t// Config properties with defaults.\n\t\tObject.assign(this, defaultConfig, config);\n\n\t\t// save given config to override other settings.\n\t\tthis.config = config;\n\n\t\t// Express view engine integration point.\n\t\tthis.engine = this.renderView.bind(this);\n\n\t\t// Normalize `extname`.\n\t\tif (this.extname.charAt(0) !== \".\") {\n\t\t\tthis.extname = \".\" + this.extname;\n\t\t}\n\n\t\t// Internal caches of compiled and precompiled templates.\n\t\tthis.compiled = {};\n\t\tthis.precompiled = {};\n\n\t\t// Private internal file system cache.\n\t\tthis._fsCache = {};\n\t}\n\n\tasync getPartials (options) {\n\t\tif (typeof this.partialsDir === \"undefined\") {\n\t\t\treturn {};\n\t\t}\n\t\tconst partialsDirs = Array.isArray(this.partialsDir) ? this.partialsDir : [this.partialsDir];\n\n\t\tconst dirs = await Promise.all(partialsDirs.map(async dir => {\n\t\t\tlet dirPath;\n\t\t\tlet dirTemplates;\n\t\t\tlet dirNamespace;\n\t\t\tlet dirRename;\n\n\t\t\t// Support `partialsDir` collection with object entries that contain a\n\t\t\t// templates promise and a namespace.\n\t\t\tif (typeof dir === \"string\") {\n\t\t\t\tdirPath = dir;\n\t\t\t} else if (typeof dir === \"object\") {\n\t\t\t\tdirTemplates = dir.templates;\n\t\t\t\tdirNamespace = dir.namespace;\n\t\t\t\tdirRename = dir.rename;\n\t\t\t\tdirPath = dir.dir;\n\t\t\t}\n\n\t\t\t// We must have some path to templates, or templates themselves.\n\t\t\tif (!dirPath && !dirTemplates) {\n\t\t\t\tthrow new Error(\"A partials dir must be a string or config object\");\n\t\t\t}\n\n\t\t\tconst templates = dirTemplates || await this.getTemplates(dirPath, options);\n\n\t\t\treturn {\n\t\t\t\ttemplates,\n\t\t\t\tnamespace: dirNamespace,\n\t\t\t\trename: dirRename,\n\t\t\t};\n\t\t}));\n\n\t\tconst partials = {};\n\n\t\tfor (const dir of dirs) {\n\t\t\tconst { templates, namespace, rename } = dir;\n\t\t\tconst filePaths = Object.keys(templates);\n\n\t\t\tconst getTemplateNameFn = typeof rename === \"function\"\n\t\t\t\t? rename\n\t\t\t\t: this._getTemplateName.bind(this);\n\n\t\t\tfor (const filePath of filePaths) {\n\t\t\t\tconst partialName = getTemplateNameFn(filePath, namespace);\n\t\t\t\tpartials[partialName] = templates[filePath];\n\t\t\t}\n\t\t}\n\n\t\treturn partials;\n\t}\n\n\tasync getTemplate (filePath, options = {}) {\n\t\tfilePath = path.resolve(filePath);\n\n\t\tconst encoding = options.encoding || this.encoding;\n\t\tconst cache = options.precompiled ? this.precompiled : this.compiled;\n\t\tlet template = options.cache && cache[filePath];\n\n\t\tif (template) {\n\t\t\treturn template;\n\t\t}\n\n\t\t// Optimistically cache template promise to reduce file system I/O, but\n\t\t// remove from cache if there was a problem.\n\t\ttry {\n\t\t\tcache[filePath] = this._getFile(filePath, { cache: options.cache, encoding })\n\t\t\t\t.then(file => {\n\t\t\t\t\tconst compileTemplate = (options.precompiled ? this._precompileTemplate : this._compileTemplate).bind(this);\n\t\t\t\t\treturn compileTemplate(file, this.compilerOptions);\n\t\t\t\t});\n\t\t\ttemplate = await cache[filePath];\n\t\t\treturn template;\n\t\t} catch (err) {\n\t\t\tdelete cache[filePath];\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tasync getTemplates (dirPath, options = {}) {\n\t\tconst cache = options.cache;\n\n\t\tconst filePaths = await this._getDir(dirPath, { cache });\n\t\tconst templates = await Promise.all(filePaths.map(filePath => {\n\t\t\treturn this.getTemplate(path.join(dirPath, filePath), options);\n\t\t}));\n\n\t\tconst hash = {};\n\t\tfor (let i = 0; i < filePaths.length; i++) {\n\t\t\thash[filePaths[i]] = templates[i];\n\t\t}\n\t\treturn hash;\n\t}\n\n\tasync render (filePath, context, options = {}) {\n\t\tconst encoding = options.encoding || this.encoding;\n\t\tconst [template, partials] = await Promise.all([\n\t\t\tthis.getTemplate(filePath, { cache: options.cache, encoding }),\n\t\t\toptions.partials || this.getPartials({ cache: options.cache, encoding }),\n\t\t]);\n\t\tconst helpers = { ...this.helpers, ...options.helpers };\n\t\tconst runtimeOptions = { ...this.runtimeOptions, ...options.runtimeOptions };\n\n\t\t// Add ExpressHandlebars metadata to the data channel so that it's\n\t\t// accessible within the templates and helpers, namespaced under:\n\t\t// `@exphbs.*`\n\t\tconst data = {\n\t\t\t...options.data,\n\t\t\texphbs: {\n\t\t\t\t...options,\n\t\t\t\tfilePath,\n\t\t\t\thelpers,\n\t\t\t\tpartials,\n\t\t\t\truntimeOptions,\n\t\t\t},\n\t\t};\n\n\t\tconst html = this._renderTemplate(template, context, {\n\t\t\t...runtimeOptions,\n\t\t\tdata,\n\t\t\thelpers,\n\t\t\tpartials,\n\t\t});\n\n\t\treturn html;\n\t}\n\n\tasync renderView (viewPath, options = {}, callback = null) {\n\t\tconst context = options;\n\n\t\tlet promise;\n\t\tif (!callback) {\n\t\t\tpromise = new Promise((resolve, reject) => {\n\t\t\t\tcallback = (err, value) => { err !== null ? reject(err) : resolve(value); };\n\t\t\t});\n\t\t}\n\n\t\t// Express provides `settings.views` which is the path to the views dir that\n\t\t// the developer set on the Express app. When this value exists, it's used\n\t\t// to compute the view's name. Layouts and Partials directories are relative\n\t\t// to `settings.view` path\n\t\tlet view;\n\t\tconst views = options.settings && options.settings.views;\n\t\tconst viewsPath = this._resolveViewsPath(views, viewPath);\n\t\tif (viewsPath) {\n\t\t\tview = this._getTemplateName(path.relative(viewsPath, viewPath));\n\t\t\tthis.partialsDir = this.config.partialsDir || path.join(viewsPath, \"partials/\");\n\t\t\tthis.layoutsDir = this.config.layoutsDir || path.join(viewsPath, \"layouts/\");\n\t\t}\n\n\t\tconst encoding = options.encoding || this.encoding;\n\n\t\t// Merge render-level and instance-level helpers together.\n\t\tconst helpers = { ...this.helpers, ...options.helpers };\n\n\t\t// Merge render-level and instance-level partials together.\n\t\tconst partials = {\n\t\t\t...await this.getPartials({ cache: options.cache, encoding }),\n\t\t\t...await (options.partials || {}),\n\t\t};\n\n\t\t// Pluck-out ExpressHandlebars-specific options and Handlebars-specific\n\t\t// rendering options.\n\t\tconst renderOptions = {\n\t\t\tcache: options.cache,\n\t\t\tencoding,\n\t\t\tview,\n\t\t\tlayout: \"layout\" in options ? options.layout : this.defaultLayout,\n\n\t\t\tdata: options.data,\n\t\t\thelpers,\n\t\t\tpartials,\n\t\t\truntimeOptions: options.runtimeOptions,\n\t\t};\n\n\t\ttry {\n\t\t\tlet html = await this.render(viewPath, context, renderOptions);\n\t\t\tconst layoutPath = this._resolveLayoutPath(renderOptions.layout);\n\n\t\t\tif (layoutPath) {\n\t\t\t\thtml = await this.render(\n\t\t\t\t\tlayoutPath,\n\t\t\t\t\t{ ...context, body: html },\n\t\t\t\t\t{ ...renderOptions, layout: undefined },\n\t\t\t\t);\n\t\t\t}\n\t\t\tcallback(null, html);\n\t\t} catch (err) {\n\t\t\tcallback(err);\n\t\t}\n\n\t\treturn promise;\n\t}\n\n\t// -- Protected Hooks ----------------------------------------------------------\n\n\t_compileTemplate (template, options) {\n\t\treturn this.handlebars.compile(template.trim(), options);\n\t}\n\n\t_precompileTemplate (template, options) {\n\t\treturn this.handlebars.precompile(template.trim(), options);\n\t}\n\n\t_renderTemplate (template, context, options) {\n\t\treturn template(context, options).trim();\n\t}\n\n\t// -- Private ------------------------------------------------------------------\n\n\tasync _getDir (dirPath, options = {}) {\n\t\tdirPath = path.resolve(dirPath);\n\n\t\tconst cache = this._fsCache;\n\t\tlet dir = options.cache && cache[dirPath];\n\n\t\tif (dir) {\n\t\t\tdir = await dir;\n\t\t\treturn dir.concat();\n\t\t}\n\n\t\tconst pattern = \"**/*\" + this.extname;\n\n\t\t// Optimistically cache dir promise to reduce file system I/O, but remove\n\t\t// from cache if there was a problem.\n\n\t\ttry {\n\t\t\tdir = cache[dirPath] = glob(pattern, {\n\t\t\t\tcwd: dirPath,\n\t\t\t\tfollow: true,\n\t\t\t});\n\t\t\tif (options._throwTestError) {\n\t\t\t\t// FIXME: not sure how to throw error in glob for test coverage\n\t\t\t\tthrow new Error(\"test\");\n\t\t\t}\n\t\t\tdir = await dir;\n\t\t\treturn dir.concat();\n\t\t} catch (err) {\n\t\t\tdelete cache[dirPath];\n\t\t\tthrow err;\n\t\t};\n\t}\n\n\tasync _getFile (filePath, options = {}) {\n\t\tfilePath = path.resolve(filePath);\n\n\t\tconst cache = this._fsCache;\n\t\tconst encoding = options.encoding || this.encoding;\n\t\tlet file = options.cache && cache[filePath];\n\n\t\tif (file) {\n\t\t\treturn file;\n\t\t}\n\n\t\t// Optimistically cache file promise to reduce file system I/O, but remove\n\t\t// from cache if there was a problem.\n\t\ttry {\n\t\t\tcache[filePath] = readFile(filePath, encoding || \"utf8\");\n\t\t\tfile = await cache[filePath];\n\t\t\treturn file;\n\t\t} catch (err) {\n\t\t\tdelete cache[filePath];\n\t\t\tthrow err;\n\t\t};\n\t}\n\n\t_getTemplateName (filePath, namespace) {\n\t\tlet name = filePath;\n\n\t\tif (name.endsWith(this.extname)) {\n\t\t\tname = name.substring(0, name.length - this.extname.length);\n\t\t}\n\n\t\tif (namespace) {\n\t\t\tname = namespace + \"/\" + name;\n\t\t}\n\n\t\treturn name;\n\t}\n\n\t_resolveViewsPath (views, file) {\n\t\tif (!Array.isArray(views)) {\n\t\t\treturn views;\n\t\t}\n\n\t\tlet lastDir = path.resolve(file);\n\t\tlet dir = path.dirname(lastDir);\n\t\tconst absoluteViews = views.map(v => path.resolve(v));\n\n\t\t// find the closest parent\n\t\twhile (dir !== lastDir) {\n\t\t\tconst index = absoluteViews.indexOf(dir);\n\t\t\tif (index >= 0) {\n\t\t\t\treturn views[index];\n\t\t\t}\n\t\t\tlastDir = dir;\n\t\t\tdir = path.dirname(lastDir);\n\t\t}\n\n\t\t// cannot resolve view\n\t\treturn null;\n\t}\n\n\t_resolveLayoutPath (layoutPath) {\n\t\tif (!layoutPath) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (!path.extname(layoutPath)) {\n\t\t\tlayoutPath += this.extname;\n\t\t}\n\n\t\treturn path.resolve(this.layoutsDir || \"\", layoutPath);\n\t}\n}\n\nmodule.exports = ExpressHandlebars;\n"]},"metadata":{},"sourceType":"script"}